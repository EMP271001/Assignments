
Answers:-


1. select * from city_table where COUNTRYCODE = "USA" and POPULATION > 100000;

2. select NAME from city_table where POPULATION > 120000;

3. select * from city_table;

4. select * from city_table where ID = 1661;

5. select * from city_table where COUNTRYCODE = "JPN";

6. select NAME from city_table where COUNTRYCODE = "JPN";

7. select CITY,STATE from station_data;

8. select distinct CITY from station_data where id % 2 = 0;

9. select (count(CITY) - count(distinct CITY)) as 'CityCount - DistCityCount' from station_data;



10. (select CITY, length(CITY) as length from station_data order by length(CITY) asc,CITY asc limit 1)
     union
    (select CITY, length(CITY) as length from station_data order by length(CITY) desc,CITY asc limit 1);



11. select distinct CITY from station_data where CITY like 'a%'or CITY like 'e%'or CITY like 'i%'or 
    CITY like 'o%'or CITY like 'u%';



12. select distinct CITY from station_data where CITY like '%a'or CITY like '%e'or CITY like '%i'or 
    CITY like '%o'or CITY like '%u';


13. select distinct CITY from station_data where CITY not like 'a%' and CITY not like 'e%' and  CITY 
     not like 'i%' and  CITY not like 'o%'and  CITY not like 'u%';


14. select distinct CITY from station_data where CITY not like '%a' and CITY not like '%e' and  CITY 
    not like '%i' and  CITY not like '%o'and  CITY not like '%u';



15. select distinct CITY from station_data where (CITY not like 'a%' and CITY not like 'e%' and  
      CITY not like 'i%' and  CITY not like 'o%'and  CITY not like 'u%') or (CITY not like '%a' and 
      CITY not like '%e' and  CITY not like '%i' and  CITY not like '%o'and  CITY not like '%u');


16. select distinct CITY from station_data where (CITY not like 'a%' and CITY not like 'e%' and  
       CITY not like 'i%' and  CITY not like 'o%'and  CITY not like 'u%') and (CITY not like '%a' and 
       CITY not like '%e' and  CITY not like '%i' and  CITY not like '%o'and  CITY not like '%u');


17. 

(select p.product_id, p.product_name from
Product p
INNER JOIN
Sales s
on p.product_id = s.product_id
where s.sale_date >= '2019-01-01' and s.sale_date <= '2019-03-31')
EXCEPT
(select p.product_id, p.product_name from
Product p
INNER JOIN
Sales s
on p.product_id = s.product_id
where s.sale_date < '2019-01-01' OR s.sale_date > '2019-03-31');


18. select distinct author_id as id from views where author_id = viewer_id order by author_id asc;


19. select round((select count(*) from delivery where order_date = 
     customer_pref_delivery_date)/count(*)*100,2) as immediate_percentage from delivery;


20. 

select t.ad_id, (case when base != 0 then round(t.num/t.base*100,2) else 0 end) as Ctr from (select
ad_id,sum( case when action = 'clicked' or action = 'viewed' then 1 else 0 end) as base, sum( case 
when action = 'clicked' then 1 else 0 end) as num from ads group by ad_id)t order by Ctr desc, 
t.ad_id asc;


21.  select employee_id, count(team_id) over (partition by team_id) as team_size from
       employee order by employee_id;



22.

select c.country_name, case
when avg(weather_state) <= 15 then 'Cold'
when avg(weather_state) >= 25 then 'Hot'
else 'Warm'
end as weather_state
from
countries c
left join
weather w
on c.country_id = w.country_id
where month(day) = 11
group by c.country_name;


23.

select p.product_id, round(sum(u.units*p.price)/sum(u.units),2) as average_price
from
prices p 
left join
unitssold u
on p.product_id = u.product_id
where u.purchase_date >= start_date and u.purchase_date <= end_date
group by product_id
order by product_id;



24.

select t.player_id, event_date as first_login from (select player_id, 
event_date, row_number() over(partition by player_id order by event_date) as num 
from activity)t where t.num = 1; 


25.

select t.player_id, t.device_id 
from (select player_id, device_id, row_number() over(partition by player_id 
order by event_date) as num from activity1)t
where t.num = 1;


26.

select p.product_name, sum(o.unit) as unit
from
Products p
left join
Orders o
on p.product_id = o.product_id
where month(o.order_date) = 2 and year(o.order_date) = 2020
group by p.product_id
having unit >= 100;


27.

select user_id, name, mail from Users 
where
mail regexp '^[a-zA-Z]+[a-zA-Z0-9_\.\-]*@leetcode[\.]com'
order by user_id;



28.

select t.customer_id, t.name from
(select c.customer_id, c.name, 
sum(case when month(o.order_date) = 6 and year(o.order_date) = 2020 then
p.price*o.quantity else 0 end) as june_spent,
sum(case when month(o.order_date) = 7 and year(o.order_date) = 2020 then
p.price*o.quantity else 0 end) as july_spent
from
Orders o
left join
Product p
on o.product_id = p.product_id
left join
Customers c
on o.customer_id = c.customer_id
group by c.customer_id) t
where june_spent >= 100 and july_spent >= 100;


29.

select c.Title from
Content c
left join
TVProgram t
on c.content_id = t.content_id
where c.Kids_content = 'Y' and c.content_type = 'Movies' and
month(t.program_date) = 6 and year(t.program_date) = 2020;


30.

select q.*, coalesce(n.Npv,0) as Npv
from
Queries q
left join
NPV n
on q.Id = n.Id and q.Year = n.Year;

31.

select q.*, coalesce(n.Npv,0) as Npv
from
Queries q
left join
NPV n
on q.Id = n.Id and q.Year = n.Year;


32.

select u.unique_id, e.name
from
employees e
left join
employeeUNI u
on e.id = u.id;

33.

select u.name, coalesce(sum(r.distance),0) as travelled_distance
from
users u
left join
rides r
on u.id = r.user_id
group by u.name
order by travelled_distance desc, u.name;




34.

select p.product_name, sum(o.unit) as unit
from
Products p
left join
Orders o
on p.product_id = o.product_id
where month(o.order_date) = 2 and year(o.order_date) = 2020
group by p.product_id
having unit >= 100;



35.

(select t1.name as Results from
(select u.name, count(u.user_id), dense_rank() over(order by count(user_id) 
desc, u.name) as r1 FROM
Users u
left join
MovieRating m
on u.user_id = m.user_id
group by u.user_id) t1
where r1 = 1)
union
(select t2.title as Results from
(select mo.title, avg(m.rating), dense_rank() over(order by avg(m.rating)desc, 
mo.title) as r2 from
Movies mo
left join
MovieRating m
on mo.movie_id = m.movie_id
where month(m.created_at) = 2 and year(m.created_at) = 2020
group by m.movie_id) t2
where r2 = 1);


36.

select u.name, coalesce(sum(r.distance),0) as travelled_distance
from
users u
left join
rides r
on u.id = r.user_id
group by u.name
order by travelled_distance desc, u.name;



37.

select u.unique_id, e.name
from
employees e
left join
employeeUNI u
on e.id = u.id;



38.

select id, name from Students 
where department_id not in (select id from Departments);


39.

select t.person1, t.person2, count(*) as call_count, sum(t.duration) as
total_duration
from
(select duration,
case when from_id < to_id then from_id else to_id end as person1,
case when from_id > to_id then from_id else to_id end as person2
from Calls) t
group by t.person1, t.person2;



40.

select p.product_id, round(sum(u.units*p.price)/sum(u.units),2) as average_price
from
prices p 
left join
unitssold u
on p.product_id = u.product_id
where u.purchase_date >= start_date and u.purchase_date <= end_date
group by product_id
order by product_id;


41.

select w.name as warehouse_name, sum(p.width*p.length*p.height*w.units) as
volume 
from
warehouse w
left join
products p
on w.product_id = p.product_id
group by w.name
order by w.name;



42.

select t.sale_date, (t.apples_sold - t.oranges_sold) as diff
from
(select sale_date,
max(CASE WHEN fruit = 'apples' THEN sold_num ELSE 0 END )as apples_sold,
max(CASE WHEN fruit = 'oranges' THEN sold_num ELSE 0 END )as oranges_sold
FROM sales
group by sale_date) t
ORDER BY t.sale_date;


43.

select round(t.player_id/(select count(distinct player_id) from activity),2) as
fraction
from
(
select distinct player_id,
datediff(event_date, lead(event_date, 1) over(partition by player_id order by
event_date)) as diff
from activity ) t
where diff = -1;


44.

select t.name from
(select a.id, a.name, count(b.managerID) as no_of_direct_reports from
employee a
INNER JOIN
employee b
on a.id = b.managerID
group by b.managerID) t
where no_of_direct_reports >= 5
order by t.name;

45.

select d.dept_name, count(s.dept_id) as student_number from
department d
left join
student s
on s.dept_id = d.dept_id
group by d.dept_id
order by student_number desc, dept_name;


46.

select customer_id
from
customer
group by customer_id
having count(distinct product_key)=(select count(*) from product);

47.

select t.project_id, t.employee_id
from
(select p.project_id, e.employee_id, dense_rank() over(partition by p.project_id 
order by e.experience_years desc) as r
from
project p
left join
employee e
on p.employee_id = e.employee_id) t
where r = 1
order by t.project_id;


48.

select t1.book_id, t1.name
from
(
(select book_id, name from Books where
available_from < '2019-05-23') t1
left join
(select book_id, sum(quantity) as quantity
from Orders
where dispatch_date > '2018-06-23' and dispatch_date<= '2019-06-23'
group by book_id
having quantity < 10) t2
on t1.book_id = t2.book_id
);


49.

select t.student_id, t.course_id, t.grade
from
(select student_id, course_id, grade, dense_rank() over(partition by student_id 
order by grade desc, course_id) as r
from enrollments) t
where r = 1
order by t.student_id;



50.


select t2.group_id, t2.player_id from
(
select t1.group_id, t1.player_id, 
dense_rank() over(partition by group_id order by score desc, player_id) as r
from
(
select p.*, case when p.player_id = m.first_player then m.first_score
when p.player_id = m.second_player then m.second_score
end as score
from
Players p, Matches m
where player_id in (first_player, second_player)
) t1
) t2
where r = 1;


========================================================================================================

















